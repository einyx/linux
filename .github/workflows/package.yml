name: Build DEB and RPM packages

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: self-hosted
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper devscripts dh-make fakeroot
        sudo apt-get install -y bc kmod cpio flex bison libssl-dev libelf-dev libdw-dev
        sudo apt-get install -y rsync
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y crossbuild-essential-arm64
          sudo apt-get install -y libssl-dev:arm64 libdw-dev:arm64 || true
        fi
    
    - name: Configure kernel
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        make defconfig
    
    - name: Build kernel
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        make -j$(nproc) deb-pkg
    
    - name: Upload DEB packages
      uses: actions/upload-artifact@v4
      with:
        name: deb-packages-${{ matrix.arch }}
        path: ../*.deb
        retention-days: 7

  build-rpm:
    runs-on: self-hosted
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    
    steps:
    - name: Setup runner directories
      run: |
        sudo mkdir -p /tmp/runner-temp /tmp/runner-tool-cache /tmp/runner-work/_tool
        sudo chmod 777 /tmp/runner-temp /tmp/runner-tool-cache /tmp/runner-work/_tool
        sudo chown -R $USER:$USER /tmp/runner-temp /tmp/runner-tool-cache /tmp/runner-work || true
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Install dependencies
      run: |
        # Check if we're on Fedora/RHEL or Ubuntu/Debian
        if command -v dnf >/dev/null 2>&1; then
          sudo dnf install -y git
          sudo dnf install -y rpm-build make gcc bc openssl-devel elfutils-libelf-devel
          sudo dnf install -y bison flex perl-devel perl-generators hostname
          sudo dnf install -y rsync tar findutils python3 dwarves
          sudo dnf install -y elfutils-devel pahole
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            sudo dnf install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          fi
        elif command -v yum >/dev/null 2>&1; then
          sudo yum install -y git
          sudo yum install -y rpm-build make gcc bc openssl-devel elfutils-libelf-devel
          sudo yum install -y bison flex perl-devel hostname
          sudo yum install -y rsync tar findutils python3
          sudo yum install -y elfutils-devel
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            sudo yum install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu || true
          fi
        else
          # Assume Ubuntu/Debian
          sudo apt-get update
          sudo apt-get install -y git build-essential
          sudo apt-get install -y rpm alien bc openssl libssl-dev libelf-dev
          sudo apt-get install -y bison flex perl hostname
          sudo apt-get install -y rsync tar findutils python3 dwarves
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          fi
        fi
    
    - name: Configure git safe directory
      run: |
        git config --global --add safe.directory $PWD
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
    
    - name: Initialize git repository
      run: |
        if [ ! -d .git ]; then
          git init
          git add -A
          git commit -m "Initial commit for RPM build"
        fi
    
    - name: Setup build environment
      run: |
        # Check available disk space
        df -h
        # Check available memory
        free -h
        # Create RPM build directory structure
        mkdir -p rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
    
    - name: Configure kernel
      run: |
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        # Clean any previous build artifacts
        make mrproper || true
        make defconfig
        # Enable necessary options for packaging
        scripts/config --enable CONFIG_LOCALVERSION_AUTO
        scripts/config --disable CONFIG_DEBUG_INFO_BTF
        scripts/config --disable CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT
        scripts/config --disable CONFIG_DEBUG_INFO_DWARF4
        scripts/config --disable CONFIG_DEBUG_INFO_DWARF5
        scripts/config --set-str CONFIG_LOCALVERSION ""
        make olddefconfig
    
    - name: Build kernel
      run: |
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        # Limit parallel jobs to avoid resource exhaustion
        JOBS=$(nproc)
        if [ $JOBS -gt 4 ]; then
          JOBS=4
        fi
        echo "Building with $JOBS jobs"
        
        # Set up build environment
        export KBUILD_BUILD_TIMESTAMP="$(date -u)"
        export KBUILD_BUILD_HOST="github-actions"
        export KBUILD_BUILD_USER="runner"
        
        # Build the RPM package with verbose output
        make -j$JOBS V=1 rpm-pkg RPMOPTS="--nodeps --define '_topdir $(pwd)/rpmbuild'"
    
    - name: Upload RPM packages
      uses: actions/upload-artifact@v4
      with:
        name: rpm-packages-${{ matrix.arch }}
        path: rpmbuild/RPMS/*/*.rpm
        retention-days: 7

  release:
    needs: [build-deb, build-rpm]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure of downloaded files
      run: ls -laR
    
    - name: Get kernel version
      id: kernel_version
      run: |
        echo "KERNEL_VERSION=$(make kernelversion 2>/dev/null || echo "6.16.0")" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.kernel_version.outputs.KERNEL_VERSION }}-${{ steps.kernel_version.outputs.DATE }}-${{ steps.kernel_version.outputs.SHORT_SHA }}
        name: Linux Kernel ${{ steps.kernel_version.outputs.KERNEL_VERSION }} Build ${{ steps.kernel_version.outputs.DATE }}
        body: |
          Automated build of Linux kernel from commit ${{ github.sha }}
          
          ## Build Information
          - **Kernel Version**: ${{ steps.kernel_version.outputs.KERNEL_VERSION }}
          - **Commit**: ${{ github.sha }}
          - **Date**: ${{ steps.kernel_version.outputs.DATE }}
          
          ## Artifacts
          This release includes DEB and RPM packages for:
          - AMD64/x86_64 architecture
          - ARM64/aarch64 architecture
        files: |
          deb-packages-*/*.deb
          rpm-packages-*/*.rpm
        draft: false
        prerelease: true
        generate_release_notes: false
