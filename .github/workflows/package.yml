name: Build DEB and RPM packages

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper devscripts dh-make
        sudo apt-get install -y bc kmod cpio flex bison libssl-dev libelf-dev libdw-dev
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y crossbuild-essential-arm64
          sudo apt-get install -y libssl-dev:arm64 libdw-dev:arm64 || true
        fi
    
    - name: Configure kernel
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        make defconfig
    
    - name: Build kernel
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        make -j$(nproc) deb-pkg
    
    - name: Upload DEB packages
      uses: actions/upload-artifact@v4
      with:
        name: deb-packages-${{ matrix.arch }}
        path: ../*.deb
        retention-days: 7

  build-rpm:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install dependencies
      run: |
        dnf install -y git
        dnf install -y rpm-build make gcc bc openssl-devel elfutils-libelf-devel
        dnf install -y bison flex perl-devel perl-generators hostname
        dnf install -y rsync tar findutils
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          dnf install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
        fi
    
    - name: Configure git safe directory
      run: |
        git config --global --add safe.directory $PWD
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
    
    - name: Initialize git repository
      run: |
        if [ ! -d .git ]; then
          git init
          git add -A
          git commit -m "Initial commit for RPM build"
        fi
    
    - name: Configure kernel
      run: |
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        make defconfig
    
    - name: Build kernel
      run: |
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi
        make -j$(nproc) rpm-pkg RPMOPTS="--nodeps"
    
    - name: Upload RPM packages
      uses: actions/upload-artifact@v4
      with:
        name: rpm-packages-${{ matrix.arch }}
        path: rpmbuild/RPMS/*/*.rpm
        retention-days: 7

  release:
    needs: [build-deb, build-rpm]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure of downloaded files
      run: ls -laR
    
    - name: Get kernel version
      id: kernel_version
      run: |
        echo "KERNEL_VERSION=$(make kernelversion 2>/dev/null || echo "6.16.0")" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.kernel_version.outputs.KERNEL_VERSION }}-${{ steps.kernel_version.outputs.DATE }}-${{ steps.kernel_version.outputs.SHORT_SHA }}
        name: Linux Kernel ${{ steps.kernel_version.outputs.KERNEL_VERSION }} Build ${{ steps.kernel_version.outputs.DATE }}
        body: |
          Automated build of Linux kernel from commit ${{ github.sha }}
          
          ## Build Information
          - **Kernel Version**: ${{ steps.kernel_version.outputs.KERNEL_VERSION }}
          - **Commit**: ${{ github.sha }}
          - **Date**: ${{ steps.kernel_version.outputs.DATE }}
          
          ## Artifacts
          This release includes DEB and RPM packages for:
          - AMD64/x86_64 architecture
          - ARM64/aarch64 architecture
        files: |
          deb-packages-*/*.deb
          rpm-packages-*/*.rpm
        draft: false
        prerelease: true
        generate_release_notes: false