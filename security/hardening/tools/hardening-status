#!/usr/bin/env python3
"""
Security Hardening LSM Status Display
"""

import os
import sys
import json
from datetime import datetime

SYSFS_PATH = "/sys/kernel/security/hardening"
PROC_PATH = "/proc/sys/kernel/hardening"

class StatusDisplay:
    def __init__(self):
        self.check_module()
    
    def check_module(self):
        """Check if hardening module is loaded"""
        if not os.path.exists(SYSFS_PATH):
            print("Security Hardening LSM: Not Loaded", file=sys.stderr)
            sys.exit(1)
    
    def read_file(self, path):
        """Read a sysfs/procfs file"""
        try:
            with open(path, "r") as f:
                return f.read().strip()
        except:
            return "N/A"
    
    def display_status(self):
        """Display comprehensive status"""
        print("=" * 60)
        print("Security Hardening LSM Status")
        print("=" * 60)
        print(f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # Module status
        enabled = self.read_file(f"{PROC_PATH}/enabled")
        enforce = self.read_file(f"{PROC_PATH}/enforce")
        
        print("Module Status:")
        print(f"  Enabled: {'Yes' if enabled == '1' else 'No'}")
        print(f"  Mode: {'Enforcing' if enforce == '1' else 'Permissive'}")
        print()
        
        # Statistics
        print("Statistics:")
        stats_path = f"{SYSFS_PATH}/stats"
        if os.path.exists(stats_path):
            stats = self.read_file(stats_path)
            print(stats)
        else:
            print("  Total checks: N/A")
            print("  Blocked operations: N/A")
            print("  Anomalies detected: N/A")
        print()
        
        # Current process info
        print("Current Process Security:")
        status = self.read_file(f"{SYSFS_PATH}/status")
        if status != "N/A":
            # Parse and display nicely
            for line in status.split('\n'):
                if line.strip():
                    print(f"  {line}")
        print()
        
        # Active features
        print("Active Features:")
        features = [
            ("Temporal Control", "temporal"),
            ("Behavioral Analysis", "behavior"),
            ("Resource Monitoring", "resources"),
            ("Process Lineage", "lineage"),
            ("Container Security", "container"),
            ("Network Profiling", "network"),
            ("Memory Analysis", "memory"),
            ("Entropy Randomization", "entropy")
        ]
        
        for name, feature in features:
            # Check if feature is enabled (would need real interface)
            status = "✓" if os.path.exists(f"{SYSFS_PATH}/{feature}") else "✗"
            print(f"  [{status}] {name}")
        
        print()
        print("=" * 60)

def main():
    display = StatusDisplay()
    display.display_status()

if __name__ == "__main__":
    main()