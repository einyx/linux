#!/usr/bin/env python3
"""
Security Hardening LSM Profile Manager
"""

import os
import sys
import json
import yaml
import argparse
from pathlib import Path

PROFILE_DIR = "/etc/hardening-lsm/profiles"

class ProfileManager:
    def __init__(self):
        self.profile_dir = Path(PROFILE_DIR)
        self.profile_dir.mkdir(parents=True, exist_ok=True)
    
    def list_profiles(self, output_format='text'):
        """List available profiles"""
        profiles_data = []
        
        profiles = list(self.profile_dir.glob("*.json"))
        for profile_file in profiles:
            name = profile_file.stem
            try:
                with open(profile_file) as f:
                    data = json.load(f)
                    profile_info = {
                        'name': name,
                        'description': data.get("description", "No description"),
                        'version': data.get('version', '1.0'),
                        'created': data.get('created', 'Unknown')
                    }
                    profiles_data.append(profile_info)
            except Exception as e:
                profiles_data.append({
                    'name': name,
                    'error': str(e)
                })
        
        # Output formatting
        if output_format == 'json':
            print(json.dumps(profiles_data, indent=2))
        elif output_format == 'yaml':
            print(yaml.dump(profiles_data, default_flow_style=False))
        else:
            # Text format
            print("Available Security Profiles:")
            print("-" * 40)
            if not profiles_data:
                print("No profiles found")
            else:
                for profile in profiles_data:
                    if 'error' in profile:
                        print(f"  {profile['name']}: Error - {profile['error']}")
                    else:
                        print(f"  {profile['name']}: {profile['description']}")
    
    def show_profile(self, name, output_format='text'):
        """Show profile details"""
        profile_file = self.profile_dir / f"{name}.json"
        
        if not profile_file.exists():
            error_data = {'error': f"Profile '{name}' not found"}
            if output_format == 'json':
                print(json.dumps(error_data, indent=2))
            elif output_format == 'yaml':
                print(yaml.dump(error_data))
            else:
                print(error_data['error'], file=sys.stderr)
            sys.exit(1)
        
        try:
            with open(profile_file) as f:
                data = json.load(f)
            
            # Add metadata
            data['_metadata'] = {
                'file': str(profile_file),
                'size': profile_file.stat().st_size,
                'modified': profile_file.stat().st_mtime
            }
            
            # Output based on format
            if output_format == 'json':
                print(json.dumps(data, indent=2))
            elif output_format == 'yaml':
                print(yaml.dump(data, default_flow_style=False))
            else:
                # Text format
                print(f"Profile: {name}")
                print("=" * (len(name) + 9))
                print(f"Description: {data.get('description', 'N/A')}")
                print(f"Version: {data.get('version', '1.0')}")
                print()
                
                print("Settings:")
                for key, value in data.items():
                    if key not in ['name', 'description', 'version', '_metadata']:
                        if isinstance(value, (list, dict)):
                            print(f"  {key}:")
                            value_str = json.dumps(value, indent=4)
                            for line in value_str.split('\n'):
                                print(f"    {line}")
                        else:
                            print(f"  {key}: {value}")
                        
        except Exception as e:
            error_data = {'error': f"Error reading profile: {e}"}
            if output_format == 'json':
                print(json.dumps(error_data, indent=2))
            elif output_format == 'yaml':
                print(yaml.dump(error_data))
            else:
                print(error_data['error'], file=sys.stderr)
            sys.exit(1)
    
    def create_profile(self, name, template=None):
        """Create a new profile"""
        profile_file = self.profile_dir / f"{name}.json"
        
        if profile_file.exists():
            response = input(f"Profile '{name}' exists. Overwrite? (y/N): ")
            if response.lower() != 'y':
                print("Cancelled")
                return
        
        # Profile templates
        templates = {
            "web_server": {
                "name": name,
                "description": "Web server security profile",
                "version": "1.0",
                "capabilities": ["CAP_NET_BIND_SERVICE", "CAP_SETUID", "CAP_SETGID"],
                "network_policy": "incoming_only",
                "filesystem_policy": "readonly_except_logs",
                "memory_limit_mb": 2048,
                "cpu_limit_percent": 80,
                "temporal_rules": [{
                    "hours": "0-23",
                    "days": "mon-sun",
                    "restrictions": []
                }]
            },
            "database": {
                "name": name,
                "description": "Database server security profile",
                "version": "1.0",
                "capabilities": ["CAP_NET_BIND_SERVICE", "CAP_IPC_LOCK"],
                "network_policy": "local_only",
                "filesystem_policy": "database_dirs_only",
                "memory_limit_mb": 8192,
                "cpu_limit_percent": 90
            },
            "container": {
                "name": name,
                "description": "Container workload security profile",
                "version": "1.0",
                "capabilities": [],
                "network_policy": "outgoing_only",
                "filesystem_policy": "restricted",
                "memory_limit_mb": 1024,
                "cpu_limit_percent": 50
            },
            "default": {
                "name": name,
                "description": "Default security profile",
                "version": "1.0",
                "capabilities": "default",
                "network_policy": "default",
                "filesystem_policy": "default"
            }
        }
        
        template_data = templates.get(template, templates["default"])
        template_data["name"] = name
        
        try:
            with open(profile_file, 'w') as f:
                json.dump(template_data, f, indent=2)
            print(f"Created profile: {name}")
        except Exception as e:
            print(f"Error creating profile: {e}", file=sys.stderr)
            sys.exit(1)
    
    def delete_profile(self, name):
        """Delete a profile"""
        profile_file = self.profile_dir / f"{name}.json"
        
        if not profile_file.exists():
            print(f"Profile '{name}' not found", file=sys.stderr)
            sys.exit(1)
        
        response = input(f"Delete profile '{name}'? (y/N): ")
        if response.lower() == 'y':
            profile_file.unlink()
            print(f"Deleted profile: {name}")
        else:
            print("Cancelled")
    
    def validate_profile(self, name):
        """Validate profile syntax"""
        profile_file = self.profile_dir / f"{name}.json"
        
        if not profile_file.exists():
            print(f"Profile '{name}' not found", file=sys.stderr)
            sys.exit(1)
        
        try:
            with open(profile_file) as f:
                data = json.load(f)
            
            # Basic validation
            required = ["name", "description"]
            for field in required:
                if field not in data:
                    print(f"Warning: Missing required field '{field}'")
            
            print(f"Profile '{name}' is valid")
            
        except json.JSONDecodeError as e:
            print(f"JSON syntax error: {e}", file=sys.stderr)
            sys.exit(1)
        except Exception as e:
            print(f"Error validating profile: {e}", file=sys.stderr)
            sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Security Hardening LSM Profile Manager")
    parser.add_argument('--format', '-f', choices=['text', 'json', 'yaml'],
                        default='text', help='Output format')
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # List profiles
    list_parser = subparsers.add_parser('list', help='List available profiles')
    list_parser.add_argument('--format', '-f', choices=['text', 'json', 'yaml'],
                             help='Output format')
    
    # Show profile
    show_parser = subparsers.add_parser('show', help='Show profile details')
    show_parser.add_argument('name', help='Profile name')
    show_parser.add_argument('--format', '-f', choices=['text', 'json', 'yaml'],
                             help='Output format')
    
    # Create profile
    create_parser = subparsers.add_parser('create', help='Create new profile')
    create_parser.add_argument('name', help='Profile name')
    create_parser.add_argument('--template', choices=['web_server', 'database', 'container', 'default'],
                              default='default', help='Profile template')
    
    # Delete profile
    delete_parser = subparsers.add_parser('delete', help='Delete profile')
    delete_parser.add_argument('name', help='Profile name')
    
    # Validate profile
    validate_parser = subparsers.add_parser('validate', help='Validate profile')
    validate_parser.add_argument('name', help='Profile name')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    mgr = ProfileManager()
    
    # Get format (subcommand format takes precedence over global)
    fmt = 'text'
    if hasattr(args, 'format') and args.format:
        fmt = args.format
    elif parser.parse_args().format:
        fmt = parser.parse_args().format
    
    if args.command == 'list':
        mgr.list_profiles(output_format=fmt)
    elif args.command == 'show':
        mgr.show_profile(args.name, output_format=fmt)
    elif args.command == 'create':
        mgr.create_profile(args.name, args.template)
    elif args.command == 'delete':
        mgr.delete_profile(args.name)
    elif args.command == 'validate':
        mgr.validate_profile(args.name)

if __name__ == "__main__":
    main()