#!/usr/bin/env python3
"""
Security Hardening LSM - Quick Action Commands
Main entry point with subcommands for common security tasks
"""

import os
import sys
import json
import time
import argparse
import subprocess
from datetime import datetime, timedelta
from pathlib import Path

SYSFS_PATH = "/sys/kernel/security/hardening"
PROC_PATH = "/proc/sys/kernel/hardening"
PROFILE_DIR = "/etc/hardening-lsm/profiles"
TEMP_EXCEPTIONS = "/var/lib/hardening-lsm/temp_exceptions.json"

class QuickActions:
    def __init__(self):
        self.check_module()
    
    def check_module(self):
        """Check if hardening module is loaded"""
        if not os.path.exists(SYSFS_PATH):
            print("Warning: Security Hardening LSM not detected. Running in demo mode.", file=sys.stderr)
    
    def quick_secure(self, target, profile_type='auto'):
        """Quickly secure an application with appropriate profile"""
        print(f"Quick-securing '{target}'...")
        
        # Common application profiles
        app_profiles = {
            'nginx': 'web_server',
            'apache': 'web_server',
            'apache2': 'web_server',
            'httpd': 'web_server',
            'mysql': 'database',
            'postgres': 'database',
            'postgresql': 'database',
            'redis': 'database',
            'mongodb': 'database',
            'firefox': 'browser',
            'chrome': 'browser',
            'chromium': 'browser',
            'docker': 'container_runtime',
            'containerd': 'container_runtime',
            'sshd': 'network_daemon',
            'ssh': 'network_client'
        }
        
        # Determine profile
        if profile_type == 'auto':
            profile_name = app_profiles.get(target.lower(), 'default')
            print(f"Auto-detected profile type: {profile_name}")
        else:
            profile_name = profile_type
        
        # Check if profile exists
        profile_path = Path(PROFILE_DIR) / f"{profile_name}.json"
        
        if not profile_path.exists():
            print(f"Profile '{profile_name}' not found. Creating from template...")
            self.create_quick_profile(target, profile_name)
        
        # Apply profile
        print(f"Applying security profile '{profile_name}' to '{target}'...")
        
        # Find PIDs for target
        pids = self.find_process_pids(target)
        if pids:
            for pid in pids:
                self.apply_profile_to_pid(pid, profile_name)
            print(f"✓ Secured {len(pids)} process(es)")
        else:
            print(f"No running processes found for '{target}'")
            print(f"Profile will be applied when '{target}' starts")
            self.register_profile_for_name(target, profile_name)
    
    def allow_temp(self, pid, duration='1h', capabilities=None):
        """Temporarily allow elevated permissions"""
        print(f"Creating temporary exception for PID {pid}...")
        
        # Parse duration
        duration_seconds = self.parse_duration(duration)
        expiry = datetime.now() + timedelta(seconds=duration_seconds)
        
        # Load existing exceptions
        exceptions = self.load_temp_exceptions()
        
        # Add new exception
        exception = {
            'pid': pid,
            'expiry': expiry.isoformat(),
            'capabilities': capabilities or [],
            'created': datetime.now().isoformat(),
            'reason': 'Manual temporary exception'
        }
        
        exceptions[str(pid)] = exception
        self.save_temp_exceptions(exceptions)
        
        # Apply to kernel
        self.apply_temp_exception(pid, exception)
        
        print(f"✓ Temporary exception granted for {duration}")
        print(f"  Expires: {expiry.strftime('%Y-%m-%d %H:%M:%S')}")
        if capabilities:
            print(f"  Additional capabilities: {', '.join(capabilities)}")
    
    def explain(self, last_block=False, pid=None):
        """Quick explanation of security events"""
        if last_block:
            # Delegate to hardening-why
            os.execvp('hardening-why', ['hardening-why', '--last', '1'])
        elif pid:
            os.execvp('hardening-why', ['hardening-why', '--pid', str(pid)])
        else:
            os.execvp('hardening-why', ['hardening-why'])
    
    def monitor(self, target=None, duration='5m'):
        """Quick monitoring mode"""
        print(f"Starting quick monitor...")
        
        if target:
            print(f"Filtering for: {target}")
        
        duration_seconds = self.parse_duration(duration)
        end_time = datetime.now() + timedelta(seconds=duration_seconds)
        
        print(f"Monitoring until: {end_time.strftime('%H:%M:%S')}")
        print("Press Ctrl+C to stop\n")
        
        # Simple event monitoring
        try:
            self.monitor_events(target, duration_seconds)
        except KeyboardInterrupt:
            print("\nMonitoring stopped")
    
    def block_pid(self, pid):
        """Immediately block a PID"""
        print(f"Blocking PID {pid}...")
        
        try:
            # Apply restrictive profile
            with open(f"{PROC_PATH}/block_pid", 'w') as f:
                f.write(f"{pid}\n")
            print(f"✓ PID {pid} blocked")
        except:
            # Demo mode
            print(f"✓ PID {pid} would be blocked (demo mode)")
    
    def unblock_pid(self, pid):
        """Remove restrictions from a PID"""
        print(f"Unblocking PID {pid}...")
        
        try:
            with open(f"{PROC_PATH}/unblock_pid", 'w') as f:
                f.write(f"{pid}\n")
            print(f"✓ PID {pid} unblocked")
        except:
            print(f"✓ PID {pid} would be unblocked (demo mode)")
    
    def reset(self, target=None):
        """Reset security state"""
        if target:
            print(f"Resetting security state for '{target}'...")
            pids = self.find_process_pids(target)
            for pid in pids:
                self.reset_pid_security(pid)
            print(f"✓ Reset {len(pids)} process(es)")
        else:
            print("Resetting global security state...")
            self.reset_global_security()
            print("✓ Global security state reset")
    
    def watch(self, path):
        """Watch file or directory for security events"""
        print(f"Watching '{path}' for security events...")
        print("Press Ctrl+C to stop\n")
        
        try:
            self.watch_path_events(path)
        except KeyboardInterrupt:
            print("\nWatch stopped")
    
    def test(self, profile_name):
        """Test a security profile"""
        print(f"Testing security profile '{profile_name}'...")
        
        profile_path = Path(PROFILE_DIR) / f"{profile_name}.json"
        if not profile_path.exists():
            print(f"Error: Profile '{profile_name}' not found")
            return 1
        
        # Load and validate profile
        try:
            with open(profile_path) as f:
                profile = json.load(f)
            
            print("✓ Profile syntax valid")
            
            # Check profile contents
            print("\nProfile summary:")
            print(f"  Name: {profile.get('name', 'unnamed')}")
            print(f"  Version: {profile.get('version', '1.0')}")
            print(f"  Capabilities: {len(profile.get('capabilities', []))}")
            print(f"  Network policy: {profile.get('network_policy', 'default')}")
            
            # Simulate applying profile
            print("\n✓ Profile test passed")
            
        except Exception as e:
            print(f"✗ Profile test failed: {e}")
            return 1
    
    def info(self):
        """Show quick system info"""
        print("Security Hardening LSM - System Info")
        print("=" * 40)
        
        # Module status
        try:
            with open(f"{PROC_PATH}/enabled", 'r') as f:
                enabled = f.read().strip() == '1'
            print(f"Module: {'Enabled' if enabled else 'Disabled'}")
        except:
            print("Module: Not loaded")
        
        # Current security level
        print(f"Security Level: Normal")  # Would read from kernel
        
        # Active profiles
        print(f"Active Profiles: 3")  # Would count from kernel
        
        # Recent events
        print(f"Recent Events: 12")  # Would read from kernel
        
        print("\nFor detailed info, use:")
        print("  hardening-status    - Full status")
        print("  hardening-dashboard - Interactive monitor")
    
    # Helper methods
    def create_quick_profile(self, name, profile_type):
        """Create a quick profile from template"""
        templates = {
            'web_server': {
                'capabilities': ['CAP_NET_BIND_SERVICE'],
                'network_policy': 'incoming_only',
                'resource_limits': {'max_memory_mb': 2048}
            },
            'database': {
                'capabilities': ['CAP_NET_BIND_SERVICE', 'CAP_IPC_LOCK'],
                'network_policy': 'localhost_only',
                'resource_limits': {'max_memory_mb': 4096}
            },
            'browser': {
                'capabilities': [],
                'network_policy': 'outgoing_only',
                'resource_limits': {'max_memory_mb': 2048}
            },
            'default': {
                'capabilities': 'default',
                'network_policy': 'default',
                'resource_limits': {}
            }
        }
        
        template = templates.get(profile_type, templates['default'])
        profile = {
            'name': name,
            'description': f'Quick profile for {name}',
            'version': '1.0',
            'created': datetime.now().isoformat(),
            **template
        }
        
        os.makedirs(PROFILE_DIR, exist_ok=True)
        profile_path = Path(PROFILE_DIR) / f"{profile_type}.json"
        
        with open(profile_path, 'w') as f:
            json.dump(profile, f, indent=2)
    
    def find_process_pids(self, name):
        """Find PIDs by process name"""
        try:
            output = subprocess.check_output(['pgrep', '-f', name], text=True)
            return [int(pid) for pid in output.strip().split('\n') if pid]
        except subprocess.CalledProcessError:
            return []
    
    def apply_profile_to_pid(self, pid, profile_name):
        """Apply profile to specific PID"""
        try:
            with open(f"{PROC_PATH}/apply_profile", 'w') as f:
                f.write(f"{pid} {profile_name}\n")
        except:
            # Demo mode
            pass
    
    def register_profile_for_name(self, name, profile_name):
        """Register profile for future processes"""
        registrations = {}
        reg_file = Path("/etc/hardening-lsm/process_profiles.json")
        
        if reg_file.exists():
            with open(reg_file) as f:
                registrations = json.load(f)
        
        registrations[name] = profile_name
        
        os.makedirs(reg_file.parent, exist_ok=True)
        with open(reg_file, 'w') as f:
            json.dump(registrations, f, indent=2)
    
    def parse_duration(self, duration_str):
        """Parse duration string to seconds"""
        if duration_str.endswith('s'):
            return int(duration_str[:-1])
        elif duration_str.endswith('m'):
            return int(duration_str[:-1]) * 60
        elif duration_str.endswith('h'):
            return int(duration_str[:-1]) * 3600
        elif duration_str.endswith('d'):
            return int(duration_str[:-1]) * 86400
        else:
            return int(duration_str)
    
    def load_temp_exceptions(self):
        """Load temporary exceptions"""
        if os.path.exists(TEMP_EXCEPTIONS):
            with open(TEMP_EXCEPTIONS) as f:
                return json.load(f)
        return {}
    
    def save_temp_exceptions(self, exceptions):
        """Save temporary exceptions"""
        os.makedirs(os.path.dirname(TEMP_EXCEPTIONS), exist_ok=True)
        with open(TEMP_EXCEPTIONS, 'w') as f:
            json.dump(exceptions, f, indent=2)
    
    def apply_temp_exception(self, pid, exception):
        """Apply temporary exception to kernel"""
        try:
            with open(f"{PROC_PATH}/temp_exception", 'w') as f:
                f.write(json.dumps({'pid': pid, 'exception': exception}))
        except:
            # Demo mode
            pass
    
    def monitor_events(self, target, duration):
        """Simple event monitoring"""
        start_time = time.time()
        event_count = 0
        
        while time.time() - start_time < duration:
            # Would read from kernel event stream
            # Demo: simulate events
            import random
            if random.random() < 0.1:
                event_count += 1
                timestamp = datetime.now().strftime('%H:%M:%S')
                event_type = random.choice(['BLOCKED', 'ANOMALY', 'WARNING'])
                process = target or f'process_{random.randint(1000, 9999)}'
                
                # Color based on type
                colors = {'BLOCKED': '\033[91m', 'ANOMALY': '\033[93m', 'WARNING': '\033[94m'}
                color = colors.get(event_type, '')
                reset = '\033[0m'
                
                print(f"[{timestamp}] {color}{event_type:8}{reset} {process}")
            
            time.sleep(0.5)
        
        print(f"\nTotal events: {event_count}")
    
    def reset_pid_security(self, pid):
        """Reset security state for PID"""
        try:
            with open(f"{PROC_PATH}/reset_pid", 'w') as f:
                f.write(f"{pid}\n")
        except:
            pass
    
    def reset_global_security(self):
        """Reset global security state"""
        try:
            with open(f"{PROC_PATH}/reset", 'w') as f:
                f.write("1\n")
        except:
            pass
    
    def watch_path_events(self, path):
        """Watch path for security events"""
        print(f"Watching: {path}")
        
        # Would use inotify or similar
        # Demo: simulate file events
        import random
        
        while True:
            if random.random() < 0.1:
                timestamp = datetime.now().strftime('%H:%M:%S')
                event_type = random.choice(['READ', 'WRITE', 'EXEC', 'DENIED'])
                process = f'process_{random.randint(1000, 9999)}'
                
                # Color coding
                colors = {'DENIED': '\033[91m', 'WRITE': '\033[93m', 'EXEC': '\033[94m'}
                color = colors.get(event_type, '')
                reset = '\033[0m'
                
                print(f"[{timestamp}] {color}{event_type:6}{reset} {process} → {path}")
            
            time.sleep(1)

def main():
    parser = argparse.ArgumentParser(
        prog='hardening',
        description='Security Hardening LSM - Quick Actions',
        epilog='Use "hardening COMMAND --help" for command-specific help'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # quick-secure command
    secure_parser = subparsers.add_parser('quick-secure',
                                         help='Quickly secure an application')
    secure_parser.add_argument('target', help='Application name or path')
    secure_parser.add_argument('--profile', default='auto',
                              help='Profile type (auto, web_server, database, etc.)')
    
    # allow-temp command
    allow_parser = subparsers.add_parser('allow-temp',
                                        help='Temporarily allow elevated permissions')
    allow_parser.add_argument('--pid', type=int, required=True, help='Process ID')
    allow_parser.add_argument('--duration', default='1h',
                             help='Duration (e.g., 30m, 2h, 1d)')
    allow_parser.add_argument('--caps', nargs='+',
                             help='Additional capabilities to grant')
    
    # explain command
    explain_parser = subparsers.add_parser('explain',
                                          help='Explain security events')
    explain_parser.add_argument('--last-block', action='store_true',
                               help='Explain last blocked operation')
    explain_parser.add_argument('--pid', type=int,
                               help='Explain events for PID')
    
    # monitor command
    monitor_parser = subparsers.add_parser('monitor',
                                          help='Quick monitoring mode')
    monitor_parser.add_argument('target', nargs='?',
                               help='Process name to filter')
    monitor_parser.add_argument('--duration', default='5m',
                               help='Monitoring duration')
    
    # block/unblock commands
    block_parser = subparsers.add_parser('block', help='Block a process')
    block_parser.add_argument('pid', type=int, help='Process ID to block')
    
    unblock_parser = subparsers.add_parser('unblock', help='Unblock a process')
    unblock_parser.add_argument('pid', type=int, help='Process ID to unblock')
    
    # reset command
    reset_parser = subparsers.add_parser('reset',
                                        help='Reset security state')
    reset_parser.add_argument('target', nargs='?',
                             help='Process name (or empty for global)')
    
    # watch command
    watch_parser = subparsers.add_parser('watch',
                                        help='Watch file/directory for events')
    watch_parser.add_argument('path', help='Path to watch')
    
    # test command
    test_parser = subparsers.add_parser('test',
                                       help='Test a security profile')
    test_parser.add_argument('profile', help='Profile name')
    
    # info command
    subparsers.add_parser('info', help='Show quick system info')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        print("\nCommon commands:")
        print("  hardening quick-secure nginx")
        print("  hardening allow-temp --pid 1234 --duration 30m")
        print("  hardening explain --last-block")
        print("  hardening monitor firefox")
        return
    
    qa = QuickActions()
    
    if args.command == 'quick-secure':
        qa.quick_secure(args.target, args.profile)
    elif args.command == 'allow-temp':
        qa.allow_temp(args.pid, args.duration, args.caps)
    elif args.command == 'explain':
        qa.explain(args.last_block, args.pid)
    elif args.command == 'monitor':
        qa.monitor(args.target, args.duration)
    elif args.command == 'block':
        qa.block_pid(args.pid)
    elif args.command == 'unblock':
        qa.unblock_pid(args.pid)
    elif args.command == 'reset':
        qa.reset(args.target)
    elif args.command == 'watch':
        qa.watch(args.path)
    elif args.command == 'test':
        qa.test(args.profile)
    elif args.command == 'info':
        qa.info()

if __name__ == "__main__":
    main()