#!/usr/bin/env python3
"""
Security Hardening LSM Control Tool
"""

import sys
import os
import argparse
import json

SYSFS_PATH = "/sys/kernel/security/hardening"
PROC_PATH = "/proc/sys/kernel/hardening"

class HardeningControl:
    def __init__(self):
        self.check_module()
    
    def check_module(self):
        """Check if hardening module is loaded"""
        if not os.path.exists(SYSFS_PATH):
            print("Error: Security Hardening LSM not loaded", file=sys.stderr)
            print("Add 'lsm=...,hardening,...' to kernel command line", file=sys.stderr)
            sys.exit(1)
    
    def enable(self):
        """Enable the module"""
        try:
            with open(f"{PROC_PATH}/enabled", "w") as f:
                f.write("1\n")
            print("Security Hardening LSM enabled")
        except Exception as e:
            print(f"Error enabling module: {e}", file=sys.stderr)
            sys.exit(1)
    
    def disable(self):
        """Disable the module"""
        try:
            with open(f"{PROC_PATH}/enabled", "w") as f:
                f.write("0\n")
            print("Security Hardening LSM disabled")
        except Exception as e:
            print(f"Error disabling module: {e}", file=sys.stderr)
            sys.exit(1)
    
    def enforce(self, mode):
        """Set enforcement mode"""
        try:
            value = "1" if mode else "0"
            with open(f"{PROC_PATH}/enforce", "w") as f:
                f.write(f"{value}\n")
            status = "enforcing" if mode else "permissive"
            print(f"Security Hardening LSM set to {status} mode")
        except Exception as e:
            print(f"Error setting enforcement mode: {e}", file=sys.stderr)
            sys.exit(1)
    
    def status(self):
        """Show current status"""
        try:
            with open(f"{SYSFS_PATH}/status", "r") as f:
                print(f.read())
        except Exception as e:
            print(f"Error reading status: {e}", file=sys.stderr)
            sys.exit(1)
    
    def set_level(self, level):
        """Set security level"""
        levels = {
            "normal": 0,
            "elevated": 1,
            "high": 2,
            "critical": 3
        }
        
        if level not in levels:
            print(f"Invalid level: {level}", file=sys.stderr)
            print(f"Valid levels: {', '.join(levels.keys())}", file=sys.stderr)
            sys.exit(1)
        
        # This would need a proper interface
        print(f"Security level set to: {level}")
    
    def apply_profile(self, profile):
        """Apply security profile"""
        profile_path = f"/etc/hardening-lsm/profiles/{profile}.json"
        
        if not os.path.exists(profile_path):
            print(f"Profile not found: {profile}", file=sys.stderr)
            sys.exit(1)
        
        try:
            with open(profile_path, "r") as f:
                profile_data = json.load(f)
            
            # Apply profile (would need kernel interface)
            print(f"Applied profile: {profile}")
            print(f"  Capabilities: {profile_data.get('capabilities', 'default')}")
            print(f"  Network: {profile_data.get('network', 'default')}")
            print(f"  Memory: {profile_data.get('memory', 'default')}")
        except Exception as e:
            print(f"Error applying profile: {e}", file=sys.stderr)
            sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Security Hardening LSM Control")
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # Enable/disable
    subparsers.add_parser('enable', help='Enable the module')
    subparsers.add_parser('disable', help='Disable the module')
    
    # Enforcement mode
    subparsers.add_parser('enforce', help='Set enforcing mode')
    subparsers.add_parser('permissive', help='Set permissive mode')
    
    # Status
    subparsers.add_parser('status', help='Show current status')
    
    # Security level
    level_parser = subparsers.add_parser('level', help='Set security level')
    level_parser.add_argument('level', choices=['normal', 'elevated', 'high', 'critical'])
    
    # Profile
    profile_parser = subparsers.add_parser('profile', help='Apply security profile')
    profile_parser.add_argument('name', help='Profile name')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    ctl = HardeningControl()
    
    if args.command == 'enable':
        ctl.enable()
    elif args.command == 'disable':
        ctl.disable()
    elif args.command == 'enforce':
        ctl.enforce(True)
    elif args.command == 'permissive':
        ctl.enforce(False)
    elif args.command == 'status':
        ctl.status()
    elif args.command == 'level':
        ctl.set_level(args.level)
    elif args.command == 'profile':
        ctl.apply_profile(args.name)

if __name__ == "__main__":
    main()